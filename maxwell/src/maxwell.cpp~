#include <maxwell.h>
#include <operators.h>
#include <iostream>
#include <cmath>

Maxwell::Maxwell(Domain &d, Solver &s) : ODE(2,0)
{
	if (d.getGhostPoints() < 2)
	{
		std::cerr << "Warning: domain has fewer ghost points than expected. Expect incorrect behavior.\n";
	}
	domain = &d;
	solver = &s;

	reallocateData();
}

Maxwell::~Maxwell()
{
}

//Initial data routine
void Maxwell::initData()
{
	MaxwellParameters *par = (MaxwellParameters *) params;
	double x0 = 0.5;
	double sigma = 0.25;

	//Loop over grids
	for (auto it = data.begin(); it != data.end(); ++it)
	{
        const double *x = it->getGrid().getPoints();
		unsigned int nx = it->getGrid().getSize();
		double **u = it->getData();
		for (unsigned int i = 0; i < nx; i++)
		{
			double val = std::exp(-(x[i] - x0) * (x[i] - x0) / (sigma * sigma));
			u[U_EY][i] = val;
			u[U_BZ][i] = -val * std::sin(x[i]);
		}
	}
}

void Maxwell::rhs(const Grid &grid, double **u, double **dtu)
{
	unsigned int nb = domain->getGhostPoints();
	double dx = grid.getSpacing();
	int nx = grid.getSize();

	//Calculate the left boundary
	dtu[U_EY][0] = - (u[U_BZ][nb + 1] - u[U_BZ][nb]) / (dx);	
	dtu[U_BZ][0] = - (u[U_EY][nb + 1] - u[U_EY][nb]) / (dx);

	for (unsigned int i = nb + 1; i < nx - 1 - nb; i++)
	{
		dtu[U_EY][i] = - (u[U_BZ][i + 1] - u[U_BZ][i - 1]) / (2.0 * dx);
		dtu[U_BZ][i] = - (u[U_EY][i + 1] - u[U_EY][i - 1]) / (2.0 * dx);
	}

	dtu[U_EY][nx - 1 - nb] = - (u[U_BZ][nx - 1 - nb] - u[U_BZ][nx - 2 - nb]) / (dx);
	dtu[U_BZ][nx - 1 - nb] = - (u[U_EY][nx - 1 - nb] - u[U_EY][nx - 2 - nb]) / (dx);
}
